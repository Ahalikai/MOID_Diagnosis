[
  {
    "id": 1,
    "type": [
      "No Additional Constraints"
    ],
    "description": "Each route has at most 0 nodes, no extra constraints.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # No Additional Constraints: Each route has at most 0 nodes, no extra constraints.\n    for route in solution.routes:\n        if len(route) > 0:\n            return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 25,
        "diagnostic suggestion": "Each route has at most 0 nodes, no extra constraints.\n\nModified Constraints:\nEach route has at most 25 nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 1,
        "diagnostic suggestion": "Each route has at most 0 nodes, no extra constraints.\n\nModified Constraints:\nEach route has at most 1 nodes."
      }
    ]
  },
  {
    "id": 2,
    "type": [
      "Priority Constraint - PVRP"
    ],
    "description": "Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 4.0,
        "diagnostic suggestion": "Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[5, 3, 1, 2, 4, 6, 9, 8, 10, 11, 12, 14, 16, 15, 19, 18, 17, 13, 23, 25, 24, 22, 21, 20], [7]]",
        "cost": 160.7,
        "violation_score": 1.0,
        "diagnostic suggestion": "Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 3,
    "type": [
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 3.0,
        "diagnostic suggestion": "Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 9, 6, 4, 2, 1, 3, 5], [7, 8, 10]]",
        "cost": 162.29999999999998,
        "violation_score": 2.0,
        "diagnostic suggestion": "Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nNodes [7, 8] may be on the same route."
      }
    ]
  },
  {
    "id": 4,
    "type": [
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[7, 5, 3, 1, 2, 4, 6, 9, 8, 10, 11, 12, 14, 16, 15, 19, 18, 17, 13, 23, 25, 24, 22, 21, 20]]",
        "cost": 131.8,
        "violation_score": 4.0,
        "diagnostic suggestion": "Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[5, 3, 1, 2, 4, 6, 9, 8, 10, 11, 12, 14, 16, 15, 19, 18, 17, 13, 23, 25, 24, 22, 21, 20], [7]]",
        "cost": 160.7,
        "violation_score": 3.0,
        "diagnostic suggestion": "Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nNodes [7, 8] may be on separate routes.\nNodes [6, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 5,
    "type": [
      "Pickup and Delivery Constraint - VRPMPD"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[5, 3, 7, 4, 1, 2, 6, 9, 8, 10, 11, 14, 12, 16, 15, 19, 18, 17, 13, 23, 25, 24, 22, 21, 20]]",
        "cost": 136.9,
        "violation_score": 5490.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n\nModified Constraints:\nAllow the vehicle capacity to be increased from 0 to at least 440 units."
      },
      {
        "routes": "[[23, 17], [4, 6], [2], [21], [14, 12], [20, 22], [9, 8], [10, 11], [5, 7], [16], [15], [1, 3], [19, 18], [24, 25], [13]]",
        "cost": 751.0999999999999,
        "violation_score": 40.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n\nModified Constraints:\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups)."
      }
    ]
  },
  {
    "id": 6,
    "type": [
      "Pickup and Delivery Constraint - VRPMPD",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[7, 5, 3, 1, 2, 4, 6, 9, 8, 10, 11, 12, 14, 16, 15, 19, 18, 17, 13, 23, 25, 24, 22, 21, 20]]",
        "cost": 131.8,
        "violation_score": 5540.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[23, 24, 22], [19, 18], [11, 17], [13], [14, 12], [20, 21], [4, 1], [9, 6], [25], [2], [16], [7], [10, 8], [15], [3, 5]]",
        "cost": 756.1999999999999,
        "violation_score": 40.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 7,
    "type": [
      "Pickup and Delivery Constraint - VRPMPD",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 10, 11, 8, 7, 5, 3, 1, 2, 4, 6, 9, 12, 14, 16, 15, 19, 18, 17, 13]]",
        "cost": 140.10000000000002,
        "violation_score": 5060.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[19, 18], [21], [10, 11], [25], [1, 3], [4, 6], [20, 24, 22], [15], [2], [5, 7], [16], [14, 12], [13], [23, 17], [9, 8]]",
        "cost": 755.0,
        "violation_score": 40.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nNodes [7, 8] may be on separate routes."
      }
    ]
  },
  {
    "id": 8,
    "type": [
      "Pickup and Delivery Constraint - VRPMPD",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[5, 3, 7, 4, 1, 2, 6, 9, 8, 10, 11, 12, 14, 16, 15, 19, 18, 17, 13, 23, 25, 24, 22, 21, 20]]",
        "cost": 132.1,
        "violation_score": 5504.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[24, 25], [3, 1], [9, 8], [20, 22], [14, 12], [10, 11], [19, 18], [5, 7], [2], [21], [13], [23, 17], [4, 6], [15], [16]]",
        "cost": 751.1,
        "violation_score": 43.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups).\nNodes [7, 8] may be on separate routes.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 9,
    "type": [
      "Time Windows Constraint - VRPTW"
    ],
    "description": "The arrival time at each node must meet its specified time window.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window.\n\nModified Constraints:\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window.\n\nModified Constraints:\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1."
      }
    ]
  },
  {
    "id": 10,
    "type": [
      "Time Windows Constraint - VRPTW",
      "Priority Constraint - PVRP"
    ],
    "description": "The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 11,
    "type": [
      "Time Windows Constraint - VRPTW",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [7, 8] may be on separate routes."
      }
    ]
  },
  {
    "id": 12,
    "type": [
      "Time Windows Constraint - VRPTW",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [7, 8] may be on separate routes.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 13,
    "type": [
      "Time Windows Constraint - VRPTW",
      "Pickup and Delivery Constraint - VRPMPD"
    ],
    "description": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n\nModified Constraints:\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nAllow the vehicle capacity to be increased from 0 to at least 440 units."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n\nModified Constraints:\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups)."
      }
    ]
  },
  {
    "id": 14,
    "type": [
      "Time Windows Constraint - VRPTW",
      "Pickup and Delivery Constraint - VRPMPD",
      "Priority Constraint - PVRP"
    ],
    "description": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups).\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 15,
    "type": [
      "Time Windows Constraint - VRPTW",
      "Pickup and Delivery Constraint - VRPMPD",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups).\nNodes [7, 8] may be on separate routes."
      }
    ]
  },
  {
    "id": 16,
    "type": [
      "Time Windows Constraint - VRPTW",
      "Pickup and Delivery Constraint - VRPMPD",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups).\nNodes [7, 8] may be on separate routes.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 17,
    "type": [
      "Distance Limit Constraint - VRPL"
    ],
    "description": "I need to make sure each route is no longer than 0 units.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 131.79999999999998,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units."
      },
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 10, 9, 6, 4, 2, 1, 3, 5], [12, 14], [17, 19, 18], [7, 8, 11, 15, 13], [16]]",
        "cost": 388.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units."
      }
    ]
  },
  {
    "id": 18,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure each route is no longer than 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 135.79999999999998,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[5, 3, 1, 2, 4, 6, 9, 10, 23, 25, 24, 22, 21, 20], [13, 15, 11, 8, 7], [18, 19, 17], [14, 12], [16]]",
        "cost": 388.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 19,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 131.79999999999998,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[13, 15, 19, 17], [16], [18, 23], [5, 3, 1, 2, 4, 6, 9, 11, 8, 7], [20, 24, 25, 22, 21], [14, 12, 10]]",
        "cost": 400.09999999999997,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nNodes [6, 7, 8] may be on the same route."
      }
    ]
  },
  {
    "id": 20,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 137.79999999999998,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[7, 8, 11, 18, 23], [14, 12, 10], [20, 24, 25, 22, 21], [13, 15, 19, 17], [5, 3, 1, 2, 4, 6, 9], [16]]",
        "cost": 402.4999999999999,
        "violation_score": 83.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nNodes [7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 21,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Pickup and Delivery Constraint - VRPMPD"
    ],
    "description": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 440,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nAllow the vehicle capacity to be increased from 0 to at least 440 units."
      },
      {
        "routes": "[[21, 22, 25, 24, 20], [23, 18, 17], [8, 11, 9, 6, 7], [19, 15, 13], [14, 12, 10], [5, 3, 4, 2, 1], [16]]",
        "cost": 434.1,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nAllow the vehicle capacity to be increased from 0 to at least 80 units."
      }
    ]
  },
  {
    "id": 22,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Pickup and Delivery Constraint - VRPMPD",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[7, 5, 3, 1, 2, 4, 6, 9, 8, 10, 11, 12, 14, 16, 15, 19, 18, 17, 13, 23, 25, 24, 22, 21, 20]]",
        "cost": 131.8,
        "violation_score": 5673.8,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 131.8 units long instead of 0 units.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[24, 23, 19, 18, 15], [5, 3, 7], [4, 9, 6], [17, 13], [22, 25], [14, 12, 16], [10, 11, 8], [1, 2], [20, 21]]",
        "cost": 464.8,
        "violation_score": 1145.8,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 96.9 units long instead of 0 units.\nAllow the vehicle capacity to be increased from 0 to at least 70 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups).\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 23,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Pickup and Delivery Constraint - VRPMPD",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 440.0,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[21, 22, 25, 24, 20], [13, 15, 19], [8, 11, 9, 6, 7], [17, 18, 23], [5, 3, 4, 2, 1], [14, 12, 10], [16]]",
        "cost": 434.0999999999999,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nAllow the vehicle capacity to be increased from 0 to at least 80 units.\nNodes [6, 7, 8] may be on the same route."
      }
    ]
  },
  {
    "id": 24,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Pickup and Delivery Constraint - VRPMPD",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 240,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[13, 15, 11, 9, 6, 8], [7, 4, 2, 1, 3, 5], [21, 23, 25, 24, 22, 20], [18, 19, 17], [14, 12, 10], [16]]",
        "cost": 401.0999999999999,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nAllow the vehicle capacity to be increased from 0 to at least 130 units.\nNodes [7, 8] may be on separate routes.\nNodes [6, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 25,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW"
    ],
    "description": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1."
      }
    ]
  },
  {
    "id": 26,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29178.799999999996,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[3, 5], [1], [18], [17], [25, 24], [14], [12], [21, 22], [9], [20], [15], [10], [7], [16], [2], [11], [8], [19], [23], [6], [13], [4]]",
        "cost": 1051.9,
        "violation_score": 128.20000000000002,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 22 should be extended from 88 to at least 102.1.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 213.0.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 27,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 2258.7999999999997,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [7, 8] may be on separate routes."
      }
    ]
  },
  {
    "id": 28,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 2258.7999999999997,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [7, 8] may be on separate routes.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 29,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Pickup and Delivery Constraint - VRPMPD"
    ],
    "description": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 2258.7999999999997,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nAllow the vehicle capacity to be increased from 0 to at least 440 units."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups)."
      }
    ]
  },
  {
    "id": 30,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Pickup and Delivery Constraint - VRPMPD",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 35082.799999999996,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[14, 16], [1], [7], [21], [17], [3], [18], [12], [20], [25], [19], [15], [10], [5], [9], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1052.8000000000002,
        "violation_score": 2284.5999999999995,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 81.6 units long instead of 0 units.\nTime window end for node 16 should be extended from 110 to at least 131.3.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 261.6.\nAllow the vehicle capacity to be increased from 0 to at least 50 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups).\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 31,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Pickup and Delivery Constraint - VRPMPD",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 2831.6,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 181.7,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups).\nNodes [7, 8] may be on separate routes."
      }
    ]
  },
  {
    "id": 32,
    "type": [
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Pickup and Delivery Constraint - VRPMPD",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Pickup and Delivery Constraint - VRPMPD: I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity.\n    pickup_nodes = {\n        24: 10,  # [24] is a pickup node\n    }\n    vehicle_capacity = solution.problem_data[\"capacity\"]\n\n    for route in solution.routes:\n        current_load = 0\n\n        for node in route:\n            demand = solution.problem_data[\"demand\"][node]\n\n            if node in pickup_nodes:\n                current_load -= pickup_nodes[node] # When a pickup node is visited\n            else:\n                current_load += demand # When a delivery node is visited\n\n            # Check if the vehicle capacity is exceeded or negative after visiting this node\n            if current_load > 0 or current_load < 0:\n                return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[7, 5, 3, 1, 2, 4, 6, 9, 8, 10, 11, 12, 14, 16, 15, 19, 18, 17, 13, 23, 25, 24, 22, 21, 20]]",
        "cost": 131.8,
        "violation_score": 34586.200000000004,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 131.8 units long instead of 0 units.\nTime window end for node 3 should be extended from 112 to at least 199.2.\nTime window end for node 1 should be extended from 112 to at least 292.8.\nTime window end for node 2 should be extended from 112 to at least 384.8.\nTime window end for node 4 should be extended from 78 to at least 478.40000000000003.\nTime window end for node 6 should be extended from 70 to at least 570.6000000000001.\nTime window end for node 9 should be extended from 60 to at least 662.8000000000002.\nTime window end for node 8 should be extended from 32 to at least 754.8000000000002.\nTime window end for node 10 should be extended from 41 to at least 848.4000000000002.\nTime window end for node 11 should be extended from 50 to at least 941.4000000000002.\nTime window end for node 12 should be extended from 110 to at least 1050.2.\nTime window end for node 14 should be extended from 110 to at least 1143.2.\nTime window end for node 16 should be extended from 110 to at least 1235.2.\nTime window end for node 15 should be extended from 42 to at least 1330.2.\nTime window end for node 19 should be extended from 110 to at least 1425.2.\nTime window end for node 18 should be extended from 111 to at least 1520.2.\nTime window end for node 17 should be extended from 14 to at least 1613.2.\nTime window end for node 13 should be extended from 9 to at least 1707.2.\nTime window end for node 23 should be extended from 77 to at least 1818.0.\nTime window end for node 25 should be extended from 22 to at least 1912.2.\nTime window end for node 24 should be extended from 113 to at least 2004.2.\nTime window end for node 22 should be extended from 88 to at least 2097.7999999999997.\nTime window end for node 21 should be extended from 113 to at least 2189.7999999999997.\nTime window end for node 20 should be extended from 113 to at least 2281.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nAllow the vehicle capacity to be increased from 0 to at least 440 units.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[24, 22], [1, 3], [18], [17], [11], [14], [12], [9], [19], [15], [10], [5, 7], [16], [2], [8], [13], [23], [4], [25], [20, 21], [6]]",
        "cost": 1028.8000000000002,
        "violation_score": 168.20000000000002,
        "diagnostic suggestion": "I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. I need to make sure the total load on each route stays within 0 units. At Node [24], 10 units of goods are picked up. Unlike delivery, visiting a pickup node reduces the vehicle’s available capacity. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 108.6.\nTime window end for node 3 should be extended from 112 to at least 112.19999999999999.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 218.29999999999998.\nAllow the vehicle capacity to be increased from 0 to at least 40 units.\nAllow the vehicle to handle a negative load of at least -10 units (for pickups).\nNodes [7, 8] may be on separate routes.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 33,
    "type": [
      "Vehicle Capacity Constraint - CVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 460,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units."
      },
      {
        "routes": "[[14, 12, 11], [1, 2], [19, 18, 23], [21], [17, 8], [7, 3, 5], [10, 13], [25], [22, 24, 20], [9, 6, 4], [16], [15]]",
        "cost": 648.8,
        "violation_score": 40,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units."
      }
    ]
  },
  {
    "id": 34,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 460,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[21], [7, 3, 5], [18, 17], [15], [25], [8, 11, 10], [4, 6, 9], [1, 2], [13, 23], [22, 24, 20], [12, 14, 19], [16]]",
        "cost": 617.1999999999999,
        "violation_score": 40,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 35,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 460,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[4, 6, 9], [21], [13, 23], [22, 24, 20], [7, 3, 5], [8, 11, 10], [25], [16], [1, 2], [19, 14, 12], [17, 18], [15]]",
        "cost": 617.1999999999999,
        "violation_score": 40,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nNodes [7, 8] may be on separate routes."
      }
    ]
  },
  {
    "id": 36,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 465.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[8, 9, 11], [6, 4, 3], [7, 5], [25], [16], [10, 13], [22, 24, 23], [1, 2], [17, 18], [12, 14, 19], [21, 20], [15]]",
        "cost": 619.5,
        "violation_score": 43.0,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nNodes [7, 8] may be on separate routes.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 37,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Time Windows Constraint - VRPTW"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1."
      }
    ]
  },
  {
    "id": 38,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Time Windows Constraint - VRPTW",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 39,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Time Windows Constraint - VRPTW",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [7, 8] may be on separate routes."
      }
    ]
  },
  {
    "id": 40,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Time Windows Constraint - VRPTW",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 60.099999999999994,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [7, 8] may be on separate routes.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 41,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Distance Limit Constraint - VRPL"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 460,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nEach route can be up to 131.79999999999998 units long instead of 0 units."
      },
      {
        "routes": "[[8, 11, 9, 6, 7], [22, 25, 24, 20], [5, 3, 4, 2, 1], [19, 15, 13], [21], [17, 18, 23], [14, 12, 10], [16]]",
        "cost": 454.29999999999995,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 80 units.\nEach route can be up to 80.6 units long instead of 0 units."
      }
    ]
  },
  {
    "id": 42,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Distance Limit Constraint - VRPL",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 460,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[22, 24, 25, 23], [20, 21], [7, 6, 9, 8], [11, 15, 13], [1, 2, 4, 3, 5], [18, 19, 17], [14, 12, 10], [16]]",
        "cost": 455.29999999999995,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 80 units.\nEach route can be up to 80.6 units long instead of 0 units.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 43,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Distance Limit Constraint - VRPL",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 460,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[7, 6, 9, 11, 8], [14, 12, 10], [20, 24, 25, 22], [17, 18, 23, 21], [19, 15, 13], [1, 2, 4, 3, 5], [16]]",
        "cost": 434.79999999999995,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 80 units.\nEach route can be up to 80.6 units long instead of 0 units.\nNodes [6, 7, 8] may be on the same route."
      }
    ]
  },
  {
    "id": 44,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Distance Limit Constraint - VRPL",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 460,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[8, 11, 9, 6, 7], [17, 18, 23, 21], [19, 15, 13], [14, 12, 10], [1, 2, 4, 3, 5], [22, 25, 24, 20], [16]]",
        "cost": 434.79999999999995,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 80 units.\nEach route can be up to 80.6 units long instead of 0 units.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 45,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 2258.7999999999997,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1."
      }
    ]
  },
  {
    "id": 46,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 2258.7999999999997,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 47,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Same Vehicle Constraint - VRPSVC"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 29046.999999999996,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [6, 7, 8] may be on the same route."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [7, 8] may be on separate routes."
      }
    ]
  },
  {
    "id": 48,
    "type": [
      "Vehicle Capacity Constraint - CVRP",
      "Distance Limit Constraint - VRPL",
      "Time Windows Constraint - VRPTW",
      "Same Vehicle Constraint - VRPSVC",
      "Priority Constraint - PVRP"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - CVRP: I need to make sure the total load on each route stays within 0 units.\n    for route in solution.routes:\n        total_demand = sum(solution.problem_data[\"demand\"][node] for node in route)\n        if total_demand > 0:\n            return False\n\n    # Distance Limit Constraint - VRPL: I need to make sure each route is no longer than 0 units.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    # Time Windows Constraint - VRPTW: The arrival time at each node must meet its specified time window.\n    for route in solution.routes:\n        current_time = 0\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n\n        for idx in range(1, len(tour)):\n            arrive_time = current_time + solution.problem_data['edge_weight'][tour[idx - 1]][tour[idx]]\n            wait_time = max(0, solution.problem_data['time_window'][tour[idx]][0] - arrive_time)  # Wait if early\n            current_time = arrive_time + wait_time\n\n            tw_start, tw_end = solution.problem_data['time_window'][tour[idx]]\n            if current_time > tw_end:\n                return False\n\n            # Add the service time for the current node after arriving and waiting\n            current_time += solution.problem_data['service_time'][tour[idx]]\n\n    # Same Vehicle Constraint - VRPSVC: Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route.\n    separation_nodes = {6, 7, 8}\n    found_7_8_together = False\n\n    for route in solution.routes:\n        route_set = set(route)\n        overlap = route_set & separation_nodes\n\n        if len(overlap) >= 2:\n            return False\n            \n        if 7 in overlap and 8 in overlap:\n            found_7_8_together = True\n\n    if not found_7_8_together:\n        return False\n\n    # Priority Constraint - PVRP: Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n    priority_nodes = {5, 7}\n\n    for route in solution.routes:\n        seen = set()\n        for i, node in enumerate(route):\n            if node in priority_nodes:\n                if i > 1:  # Appears too late\n                    return False\n                seen.add(node)\n                if len(seen) == 1 and i != 0:  # First must be at position 0\n                    return False\n                if len(seen) == 2 and i != 1:  # Second must be at position 1\n                    return False\n        \n        for i in range(min(2, len(route))):\n            if route[i] in priority_nodes:\n                return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 2263.7999999999997,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 460 units.\nEach route can be up to 131.79999999999998 units long instead of 0 units.\nTime window end for node 22 should be extended from 88 to at least 194.0.\nTime window end for node 24 should be extended from 113 to at least 287.6.\nTime window end for node 25 should be extended from 22 to at least 379.6.\nTime window end for node 23 should be extended from 77 to at least 473.8.\nTime window end for node 13 should be extended from 9 to at least 584.5999999999999.\nTime window end for node 17 should be extended from 14 to at least 678.5999999999999.\nTime window end for node 18 should be extended from 111 to at least 771.5999999999999.\nTime window end for node 19 should be extended from 110 to at least 866.5999999999999.\nTime window end for node 15 should be extended from 42 to at least 961.5999999999999.\nTime window end for node 16 should be extended from 110 to at least 1056.6.\nTime window end for node 14 should be extended from 110 to at least 1148.6.\nTime window end for node 12 should be extended from 110 to at least 1241.6.\nTime window end for node 11 should be extended from 50 to at least 1350.3999999999999.\nTime window end for node 10 should be extended from 41 to at least 1443.3999999999999.\nTime window end for node 8 should be extended from 32 to at least 1536.9999999999998.\nTime window end for node 9 should be extended from 60 to at least 1628.9999999999998.\nTime window end for node 6 should be extended from 70 to at least 1721.1999999999998.\nTime window end for node 4 should be extended from 78 to at least 1813.3999999999999.\nTime window end for node 2 should be extended from 112 to at least 1906.9999999999998.\nTime window end for node 1 should be extended from 112 to at least 1998.9999999999998.\nTime window end for node 3 should be extended from 112 to at least 2092.6.\nTime window end for node 5 should be extended from 113 to at least 2183.6.\nTime window end for node 7 should be extended from 113 to at least 2275.7999999999997.\nTime window end for node 0 (depot) should be extended from 123 to at least 2381.7999999999997.\nNodes [6, 7, 8] may be on the same route.\nNodes [5, 7] can be visited among the first two nodes."
      },
      {
        "routes": "[[25], [1], [7], [18], [21], [17], [3], [14], [12], [20], [9], [19], [15], [10], [5], [16], [2], [11], [8], [13], [23], [4], [24], [22], [6]]",
        "cost": 1130.4,
        "violation_score": 83.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units. I need to make sure each route is no longer than 0 units. The arrival time at each node must meet its specified time window. Nodes [6, 7, 8] must not be on the same route. Nodes [7, 8] must be on the same route. Nodes [5, 7] are priority points. Nodes [5, 7] cannot be visited among the first two nodes.\n\nModified Constraints:\nChange the maximum load capacity per vehicle from 0 units to at least 40 units.\nEach route can be up to 80.6 units long instead of 0 units.\nTime window end for node 17 should be extended from 14 to at least 33.3.\nTime window end for node 13 should be extended from 9 to at least 30.8.\nTime window end for node 0 (depot) should be extended from 123 to at least 183.1.\nNodes [7, 8] may be on separate routes.\nNodes [5, 7] can be visited among the first two nodes."
      }
    ]
  },
  {
    "id": 49,
    "type": "Vehicle Capacity Constraint - DCVRP",
    "description": "I need to make sure the total load on each route stays within 0 units.Specifically, for node [19], its base demand is augmented by 5 times the square root of the accumulated travel distance from the depot [0] to that node.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    \"\"\"\n    Check if the solution satisfies the constraints.\n\n    Args:\n        solution (VrpState): An object representing the VRP solution.\n            - problem_data (dict): A dictionary with problem details:\n                - \"edge_weight\": A 2D NumPy array of distances between nodes.\n                - \"demand\": A 1D NumPy array of node demands (0 for the depot).\n                - \"capacity\": Maximum load capacity per vehicle.\n            - routes (list): A list of routes, where each route is a list of node IDs (integers, excluding the depot node 0).\n\n    Returns:\n        bool: True if the solution satisfies the constraints, False otherwise.\n\n    Note:\n        The above \"Args\" cannot be added or modified, and no data outside the \"solution\" object should be used or added.\n    \"\"\"\n    edge_weight = solution.problem_data[\"edge_weight\"]\n    demand = solution.problem_data[\"demand\"]\n    capacity = 0\n\n    for route in solution.routes:\n        total_demand = 0\n        accumulated_distance = 0\n\n        prev_node = 0\n        for node in route:\n            # Calculate the distance from the previous node to the current node\n            accumulated_distance += edge_weight[prev_node][node]\n\n            # Adjust demand for node 19 based on accumulated distance\n            adjusted_demand = demand[node]\n            if node == 19:\n                adjusted_demand += 5 * (accumulated_distance ** 0.5)\n\n            total_demand += adjusted_demand\n\n            # If at any point the total demand exceeds the vehicle capacity, return False\n            if total_demand > capacity:\n                return False\n\n            prev_node = node  # Update the previous node for the next iteration\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 497.61648574760807,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units.Specifically, for node [19], its base demand is augmented by 5 times the square root of the accumulated travel distance from the depot [0] to that node.\n\nModified Constraints:\nIncrease the maximum load capacity per vehicle from 0 to at least 497.61648574760807 units."
      },
      {
        "routes": "[[11, 12, 14], [15], [23, 13], [17, 18], [2, 1], [25], [19], [21], [16], [10, 9, 6], [8, 7], [20, 24, 22], [5, 4, 3]]",
        "cost": 685.8,
        "violation_score": 41.22498999199199,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units.Specifically, for node [19], its base demand is augmented by 5 times the square root of the accumulated travel distance from the depot [0] to that node.\n\nModified Constraints:\nIncrease the maximum load capacity per vehicle from 0 to at least 41.22498999199199 units."
      }
    ]
  },
  {
    "id": 50,
    "type": [
      "Vehicle Capacity Constraint - DCVRP",
      "Distance Limit Constraint - VRPL"
    ],
    "description": "I need to make sure the total load on each route stays within 0 units.Specifically, for node [19], its base demand is augmented by 5 times the square root of the accumulated travel distance from the depot [0] to that node. I need to make sure each route is no longer than 0 units.",
    "code": "def check_constraints(solution: VrpState) -> bool:\n    # Vehicle Capacity Constraint - DCVRP: The total load of each route must not exceed the vehicle capacity. Specifically, for node [19], its base demand is augmented by 5 times the square root of the accumulated travel distance from the depot [0] to that node.\n    edge_weight = solution.problem_data[\"edge_weight\"]\n    demand = solution.problem_data[\"demand\"]\n    capacity = 0\n\n    for route in solution.routes:\n        total_demand = 0\n        accumulated_distance = 0\n\n        prev_node = 0\n        for node in route:\n            # Calculate the distance from the previous node to the current node\n            accumulated_distance += edge_weight[prev_node][node]\n\n            # Adjust demand for node 19 based on accumulated distance\n            adjusted_demand = demand[node]\n            if node == 19:\n                adjusted_demand += 5 * (accumulated_distance ** 0.5)\n\n            total_demand += adjusted_demand\n\n            # If at any point the total demand exceeds the vehicle capacity, return False\n            if total_demand > capacity:\n                return False\n\n            prev_node = node  # Update the previous node for the next iteration\n\n    # Distance Limit Constraint - VRPL: Each route must not exceed 0 units in length.\n    max_route_length = 0\n    distances = solution.problem_data[\"edge_weight\"]\n\n    for route in solution.routes:\n        tour = [0] + route + [0]  # Add depot at the beginning and end of the route\n        route_length = sum(distances[tour[idx - 1]][tour[idx]] for idx in range(1, len(tour)))\n\n        # Check if the route length exceeds the maximum allowed length\n        if route_length > max_route_length:\n            return False\n\n    return True",
    "solutions": [
      {
        "routes": "[[20, 21, 22, 24, 25, 23, 13, 17, 18, 19, 15, 16, 14, 12, 11, 10, 8, 9, 6, 4, 2, 1, 3, 5, 7]]",
        "cost": 131.79999999999998,
        "violation_score": 497.61648574760807,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units.Specifically, for node [19], its base demand is augmented by 5 times the square root of the accumulated travel distance from the depot [0] to that node. I need to make sure each route is no longer than 0 units.\n\nModified Constraints:\nVehicle capacity constraint relaxed from 0 to 497.61648574760807 units.\nRoute length constraint relaxed from 0 to 131.79999999999998 units."
      },
      {
        "routes": "[[21, 20], [12, 14], [15, 18, 17], [7, 4, 2, 1, 5], [13, 19], [22, 24, 25, 23], [3, 6, 8, 9, 11, 10], [16]]",
        "cost": 465.9999999999999,
        "violation_score": 80.6,
        "diagnostic suggestion": "I need to make sure the total load on each route stays within 0 units.Specifically, for node [19], its base demand is augmented by 5 times the square root of the accumulated travel distance from the depot [0] to that node. I need to make sure each route is no longer than 0 units.\n\nModified Constraints:\nVehicle capacity constraint relaxed from 0 to 80 units.\nRoute length constraint relaxed from 0 to 80.6 units."
      }
    ]
  }
]